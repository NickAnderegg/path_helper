#!/usr/bin/ruby

## A better path helper - don't put the standard bins first.

require 'optparse'

require_relative "../lib/path_helper/version.rb"
require_relative "../lib/path_helper.rb"

options = {}
OptionParser.new do |opts|
	opts.banner = "Usage: path_helper.rb [options]"
	opts.on("-p", "--path [PATH]", "Either pass the current path, a path you wish appended, or an empty string / nothing at all to start with a clean slate") do |cp|
		options[:path] = cp || false
	end
	opts.on("-m", "--man", 'Run for man pages but perhaps read `man manpages` first') do
		options[:man] = true
	end
	opts.on("--dyld-fram [DYLD]", 'DYLD_FALLBACK_FRAMEWORK_PATH env var') do |dyld|
		options[:dyld_fram] = dyld || true
	end
	opts.on("--dyld-lib [DYLD]", "DYLD_FALLBACK_LIBRARY_PATH env var") do |dyld|
		options[:dyld_lib] = dyld || true
	end
	opts.on("-c", "--c-include [C_INCLUDE]", 'C_INCLUDE_PATH env var') do |ci|
		options[:ci] = ci || true
	end
	opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
		options[:verbose] = v
	end
	opts.on("-d", "--[no-]debug", "Debug mode, even more output") do
		options[:debug] = true
	end
	opts.on( '--version', 'Print version') do
    warn VERSION
    exit 0
  end
	opts.on_tail("-h", "--help", "Show this message") do
		warn opts
		exit
	end
	
	if ARGV.empty?
		warn opts
		exit
	end
end.parse!

if ENV["DEBUG"]
	options[:debug] = true
end
if options[:debug]
	options[:verbose] = true
end


helper = PathHelper::CLI.new options
print helper.paths


exit 0
